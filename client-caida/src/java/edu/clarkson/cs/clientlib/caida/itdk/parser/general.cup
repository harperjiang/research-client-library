package edu.clarkson.cs.clientlib.caida.itdk.parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;

import edu.clarkson.cs.clientlib.caida.itdk.model.*;

/* Preliminaries to set up and use the scanner.  */
init with {:               :};
scan with {: return getScanner().next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal            COLON;
terminal 			NODE,LINK,NODELINK;
terminal String     IP,NID,LID;

/* Non terminals */
non terminal Object        record;
non terminal Link		   link;
non terminal Node		   node;
non terminal NodeLink	   nodelink;
non terminal List<String>  ipList;
non terminal List<NodeRef> nodeRefList;
non terminal NodeRef	   nodeRef;
/* Precedences */


start with record;

/* The grammar */
record			::= node:n {: RESULT = n; :}
				|	link:l {: RESULT = l; :}
				|	nodelink:nl {: RESULT = nl; :};
				
node 			::= NODE NID:id COLON ipList:il {: RESULT = new Node(id); RESULT.setIps(il); :};

link			::= LINK LID:id COLON nodeRefList:nrl {: RESULT = new Link(id); RESULT.setNodes(nrl); :}; 

nodelink		::= NODELINK NID:nid COLON LID:lid {: RESULT = new NodeLink(new NodeRef(nid), lid); :}
				|	NODELINK NID:nid COLON IP:ip COLON LID:lid {: RESULT = new NodeLink(new NodeRef(nid,ip), lid); :};

ipList			::= IP:il1 {: RESULT = new ArrayList(); RESULT.add(il1); :}
				|   ipList:il IP:il1 {: RESULT = il; RESULT.add(il1); :};
				
nodeRefList		::= nodeRef:nr {: RESULT = new ArrayList<NodeRef>(); RESULT.add(nr); :}
				|	nodeRefList:nrl nodeRef:nr {: RESULT = nrl; nrl.add(nr); :};
				
nodeRef			::= NID:id COLON IP:ip {: RESULT = new NodeRef(id,ip); :}
				|	NID:id	{: RESULT = new NodeRef(id); :};				
				
				