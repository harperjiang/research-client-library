
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 01 14:50:30 EDT 2014
//----------------------------------------------------

package edu.clarkson.cs.clientlib.caida.itdk.parser;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import edu.clarkson.cs.clientlib.caida.itdk.model.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 01 14:50:30 EDT 2014
  */
public class NodeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public NodeParser() {super();}

  /** Constructor which sets the default scanner. */
  public NodeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public NodeParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\004\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\004\005\004\001\002\000\004\007\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\004\010\001\002\000\004\006\012\001\002\000" +
    "\006\002\000\006\013\001\002\000\006\002\uffff\006\uffff" +
    "\001\002\000\006\002\ufffe\006\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\011\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$NodeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$NodeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$NodeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$NodeParser$actions {
  private final NodeParser parser;

  /** Constructor */
  CUP$NodeParser$actions(NodeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$NodeParser$do_action(
    int                        CUP$NodeParser$act_num,
    java_cup.runtime.lr_parser CUP$NodeParser$parser,
    java.util.Stack            CUP$NodeParser$stack,
    int                        CUP$NodeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$NodeParser$result;

      /* select the action based on the action number */
      switch (CUP$NodeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ipList ::= ipList IP 
            {
              List<String> RESULT =null;
		int illeft = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)).value;
		int il1left = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()).left;
		int il1right = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()).right;
		String il1 = (String)((java_cup.runtime.Symbol) CUP$NodeParser$stack.peek()).value;
		 RESULT = il; RESULT.add(il1); 
              CUP$NodeParser$result = parser.getSymbolFactory().newSymbol("ipList",1, ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()), RESULT);
            }
          return CUP$NodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ipList ::= IP 
            {
              List<String> RESULT =null;
		int il1left = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()).left;
		int il1right = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()).right;
		String il1 = (String)((java_cup.runtime.Symbol) CUP$NodeParser$stack.peek()).value;
		 RESULT = new ArrayList(); RESULT.add(il1); 
              CUP$NodeParser$result = parser.getSymbolFactory().newSymbol("ipList",1, ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()), RESULT);
            }
          return CUP$NodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // node ::= NODE ID COLON ipList 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-2)).value;
		int illeft = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()).left;
		int ilright = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()).right;
		List<String> il = (List<String>)((java_cup.runtime.Symbol) CUP$NodeParser$stack.peek()).value;
		 RESULT = new Node(id); RESULT.setIps(il); 
              CUP$NodeParser$result = parser.getSymbolFactory().newSymbol("node",0, ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-3)), ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()), RESULT);
            }
          return CUP$NodeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= node EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)).value;
		RESULT = start_val;
              CUP$NodeParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$NodeParser$stack.elementAt(CUP$NodeParser$top-1)), ((java_cup.runtime.Symbol)CUP$NodeParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$NodeParser$parser.done_parsing();
          return CUP$NodeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

